<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web网站介绍-CSS</title>
      <link href="/django/css/"/>
      <url>/django/css/</url>
      
        <content type="html"><![CDATA[<p><strong>CSS</strong>：层叠样式表。控制HTML元素，美化HTML网页</p><ul><li>样式存储在样式表中，目的是为了解决内容与表现分离的问题</li><li>外部CSS文件可以极大提高工作效率</li><li>多个CSS文件层叠冲突时，后者可以覆盖前者</li></ul><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><p><img src="/pictures/grammar.png" alt="CSS"></p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&#x2F;* 注释方式 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用CSS的三种方式"><a href="#使用CSS的三种方式" class="headerlink" title="使用CSS的三种方式"></a>使用CSS的三种方式</h3><ol><li>内联方式（行内样式）</li><li>内部方式（内嵌样式）</li><li>外部导入方式（外部链入）</li></ol><p><strong>优先级</strong>： 当样式冲突时，采用就近原则（CSS属性离被修饰的内容最近的为主）；没有样式冲突则采用叠加效果</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web网站介绍-HTML</title>
      <link href="/django/html/"/>
      <url>/django/html/</url>
      
        <content type="html"><![CDATA[<h2 id="动态网站介绍"><a href="#动态网站介绍" class="headerlink" title="动态网站介绍"></a>动态网站介绍</h2><ul><li>网站的功能性从“静态内容”的展示转向“动态内容”的传递。动态与静态最基本的区分方法，通常是判断是否采用了数据库的开发模式。</li><li>动态网站以数据库技术为基础，可大大降低网站维护工作量，可实现用户注册、登录、在线调查、用户管理、订单管理等等</li><li>比较流行的WEB技术：Python、PHP、JaveEE、Ruby与ASP.NET</li></ul><p><strong>HTTP</strong>: 超文本传输协议。所有的WWW文件都必须遵守这个标准。设计HTTP最初饿目的是为了提供一种发布和接收HTML页面的方法<br>HTTP是一个客户端、服务器端请求和应答的标准（TCP）。客户端是终端用户，服务端是网站。<br><strong>HTTPS</strong>：后面加一个SSL，加密传输协议。</p><h2 id="HTML基础语法"><a href="#HTML基础语法" class="headerlink" title="HTML基础语法"></a>HTML基础语法</h2><ul><li>HTML是由标签和内容构成</li><li>标签有两种：双标签：&lt;标签名&gt;…&lt;/标签名&gt;和单标签：&lt;标签名/&gt;</li><li>标签中还可以添加属性：&lt;标签名 属性名1=”值1” 属性名2=”值2”&gt;…&lt;/标签名&gt;</li><li>标签规范：标签名小写、属性使用双引号、标签要闭合</li></ul><p><img src="/pictures/old_html.png" alt="HTML4.0.1"><br><img src="/pictures/xhtml.png" alt="XHTML"><br><img src="/pictures/HTML5.png" alt="HTML5"></p><ul><li><strong>head</strong>对当前网页做说明。</li><li><strong>body</strong>是呈现的网页内容</li><li><strong>注释</strong>“<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- HTML中的注释方式--&gt;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/pictures/tag.png" alt="头部信息说明"></p><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><p><img src="/pictures/often_use_tag.png" alt="文本标签"></p><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><p><img src="/pictures/format_tag.png" alt="格式化标签"></p><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><img src="/pictures/img_tag.png" alt="图片标签"></p><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><img src="/pictures/href_tag.png" alt="超链接标签"></p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><img src="/pictures/table_tag.png" alt="表格标签"></p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p><img src="/pictures/form_tag.png" alt="表单标签"></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action&#x3D;&quot;dst.html method&#x3D;&quot;get&quot;&gt;账号： &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;uname&quot;&#x2F;&gt;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;密码： &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;upass&quot;&#x2F;&gt;&lt;br&#x2F;&gt;&lt;&#x2F;br&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击登录按钮时，账号放在uname里，密码放在upass里，通过get方式发送到dst.html。</p><h3 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h3><p><img src="/pictures/media_tag.png" alt="多媒体标签"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModelForm</title>
      <link href="/django/modelform/"/>
      <url>/django/modelform/</url>
      
        <content type="html"><![CDATA[<p>如果想创建一个让用户提交评论的表单，在表单中定义字段类型是多余的，因为在模型中已经定义了字段。<br>因此，Django提供了一个辅助类让你可以从一个Django模型创建一个Form类。</p><h2 id="ModelForm"><a href="#ModelForm" class="headerlink" title="ModelForm"></a>ModelForm</h2><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.forms import ModelFormfrom myapp.models import Articleclass ArticleForm(ModelForm):class Meta:model &#x3D; Articlefields &#x3D; [&#39;pub_date&#39;, &#39;headline&#39;, &#39;content&#39;, &#39;reporter&#39;]# Creating a form to add an article.form &#x3D; ArticleForm()# Creating a form to change an existing article.article &#x3D; Article.objects.get(pk&#x3D;1)form &#x3D; ArticleForm(instance&#x3D;article)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子：</p><pre class="line-numbers language-Pyhton" data-language="Pyhton"><code class="language-Pyhton">from django.db import modelsfrom django.forms import ModelFormTITLE_CHOICES &#x3D; [    (&#39;MR&#39;, &#39;Mr.&#39;),    (&#39;MRS&#39;, &#39;Mrs.&#39;),    (&#39;MS&#39;, &#39;Ms.&#39;),]class Author(models.Model):    name &#x3D; models.CharField(max_length&#x3D;100)    title &#x3D; models.CharField(max_length&#x3D;3, choices&#x3D;TITLE_CHOICES)    birth_date &#x3D; models.DateField(blank&#x3D;True, null&#x3D;True)    def __str__(self):        return self.nameclass Book(models.Model):    name &#x3D; models.CharField(max_length&#x3D;100)    authors &#x3D; models.ManyToManyField(Author)class AuthorForm(ModelForm):    class Meta:        model &#x3D; Author        fields &#x3D; [&#39;name&#39;, &#39;title&#39;, &#39;birth_date&#39;]class BookForm(ModelForm):    class Meta:        model &#x3D; Book        fields &#x3D; [&#39;name&#39;, &#39;authors&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中AuthorForm和BookForm等同于：</p><pre class="line-numbers language-Pyrhon" data-language="Pyrhon"><code class="language-Pyrhon">from django import formsclass AuthorForm(forms.Form):    name &#x3D; forms.CharField(max_length&#x3D;100)    title &#x3D; forms.CharField(        max_length&#x3D;3,        widget&#x3D;forms.Select(choices&#x3D;TITLE_CHOICES),    )    birth_date &#x3D; forms.DateField(required&#x3D;False)class BookForm(forms.Form):    name &#x3D; forms.CharField(max_length&#x3D;100)    authors &#x3D; forms.ModelMultipleChoiceField(queryset&#x3D;Author.objects.all())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证ModelForm"><a href="#验证ModelForm" class="headerlink" title="验证ModelForm"></a>验证ModelForm</h2><ol><li>验证表单</li><li>验证模型实例</li></ol><p>模型表单验证调用is_valid()或访问errors属性时隐式触发。</p><h3 id="error-messages的注意事项"><a href="#error-messages的注意事项" class="headerlink" title="error_messages的注意事项"></a>error_messages的注意事项</h3><p>在表单字段级别或者表单Meta级别定义的错误信息优先级总是高于在模型字段级别定义的。</p><p>在模型字段上定义的错误信息只有在模型验证步骤引发ValidationError时才会使用，并且没有在表单级定义响应的错误信息。</p><p>可以通过添加NON_FIELD_ERRORS键到ModelForm内部的Meta类的error_messages中来覆盖模型验证引发的NON_FIELD_ERRORS错误信息</p><pre class="line-numbers language-Pyhton" data-language="Pyhton"><code class="language-Pyhton">from django.core.exceptions import NON_FIELD_ERRORSfrom django.forms import ModelFormclass ArticleForm(ModelForm):    class Meta:        error_messages &#x3D; &#123;            NON_FIELD_ERRORS: &#123;                &#39;unique_together&#39;: &quot;%(model_name)s&#39;s %(field_labels)s are not unique.&quot;,            &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h3><p>根据绑定到表单的数据创建并保存数据库对象。<br>ModelFOrm的子类可接收一个现有的模型实例作为关键字参数instance；如果提供了，save()会更新这个实例。如果没有，save()会创建一个新实例</p><pre class="line-numbers language-Pyhton" data-language="Pyhton"><code class="language-Pyhton">from myapp.models import Articlefrom myapp.forms import ArticleForm# Create a form instance from POST data.f &#x3D; ArticleForm(request.POST)# Save a new Article object from the form&#39;s data.new_article &#x3D; f.save()# Create a form to edit an existing Article, but use# POST data to populate the form.a &#x3D; Article.objects.get(pk&#x3D;1)f &#x3D; ArticleForm(request.POST, instance&#x3D;a)f.save()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>save()方法接收一个可选参数commit，值为Boolean。如果调用save()的时候使用commit=False，那么它会返回一个尚未保存到数据库的对象。<br>在这种情况下，需要您自己在生成的模型实力上调用save()。如果要在保存对象之前对对象执行自定义操作，或者要使用其中一个专用的模型保存选项，此方法就很有用。</p><p>如果模型具有多对多关系，并且在保存表单时制定了commit=False，Django无法立即保存多对多关系的表单数据。这是因为实例的多对多数据只有实例在数据库中存在时才能保存。</p><p>要解决这个问题，Django会在每次使用commit=False保存表单时，向ModelForm子类添加一个save_m2m()方法。在您手动保存表单生成的实例后，可以调用save_m2m()来保存多对多的表单数据。</p><pre class="line-numbers language-Pyrhon" data-language="Pyrhon"><code class="language-Pyrhon"># Create a form instance with POST data.f &#x3D; AuthorForm(request.POST)# Create, but don&#39;t save the new author instance.new_author &#x3D; f.save(commit&#x3D;False)# Modify the author in some way.new_author.some_field &#x3D; &#39;some_value&#39;# Save the new instance.new_author.save()# Now, save the many-to-many data for the form.f.save_m2m()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有在使用save(commit=False)的时候才需要调用save_m2m()。 当您在表单上使用save()时，无需调用其他方法，所有数据都会被保存。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">a &#x3D; Author()f &#x3D; AuthorForm(request.POST, instance&#x3D;a)new_author &#x3D; f.save()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="选择要使用的字段"><a href="#选择要使用的字段" class="headerlink" title="选择要使用的字段"></a>选择要使用的字段</h3><p>强烈建议使用fields属性来显式设置所有应在表单中编辑的字段。如果不这样做，当一张表单不慎允许用户设置某些字段，尤其是在将新字段添加到模型中时，很容易导致安全问题。根据表单渲染方式的不同，甚至可能不会在网页上现实问题。</p><p>有两种简单的方法保证不会出现安全问题：</p><ol><li>将fields属性设置为特殊值’<strong>all</strong>‘以表明需要使用模型中的所有字段。如：</li></ol><pre class="line-numbers language-Pyhton" data-language="Pyhton"><code class="language-Pyhton">from django.forms import ModelFormclass AuthorForm(ModelForm):    class Meta:        model &#x3D; Author        fields &#x3D; &#39;__all__&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将ModelForm中Meta类的exclude属性设置为表单中需要排除的字段列表。如：</li></ol><pre class="line-numbers language-Pyhton" data-language="Pyhton"><code class="language-Pyhton">class PartialAuthorForm(ModelForm):    class Meta:        model &#x3D; Author        exclude &#x3D; [&#39;title&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于Author模型有三个字段name、title和birth_date，上例的结果时字段name和birth_date会呈现在表单中。</p><p>另外，Django有个规则：如果在模型字段中定义了editable=False，任何使用ModelForm创建的表单都不会包含field。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>表单的使用</title>
      <link href="/django/working-with-form/"/>
      <url>/django/working-with-form/</url>
      
        <content type="html"><![CDATA[<p>  Hexo框架，做静态页面很容易。但做交互不太方便，至少看了官方文档我是放弃了。所以开始学习Django，交互就必不可免的要用到表单。</p><h2 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h2><p>  HTML中，表单是在</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;form&gt;...&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  中的一些元素。日期选择或复杂的操作空间，一般通过JavaScript，CSS以及HTML中的input元素来实现这些效果。</p><p>  表单必须指定两样东西：</p><ul><li>Where：负责响应用户输入数据的URL地址</li><li>How：数据请求使用的HTTP方法<br>例如：登录用户名type=”text”, 密码用type=”password”，登录按钮type=”submit”。<br>表单数据发往form的action属性指定的URL，并使用method属性指定的HTTP方法–POST.</li></ul><h2 id="Django在表单中的角色"><a href="#Django在表单中的角色" class="headerlink" title="Django在表单中的角色"></a>Django在表单中的角色</h2><p>  Django会处理涉及表单的三个不同部分：</p><ul><li>准备并重组数据，以便下一步的渲染</li><li>为数据创建HTML表单</li><li>接收并处理客户端提交的表单及数据</li></ul><h2 id="Django的Form类"><a href="#Django的Form类" class="headerlink" title="Django的Form类"></a>Django的Form类</h2><p>  类似于模型类的字段映射到数据库字段的方式，表单类的字段会映射到HTML表单的input元素。ModelForm通过Form映射模型类的字段到HTML表单的input元素。<br>  DateField和FileField处理的数据类型差别很大，所以必须用来处理不同的字段。</p><h2 id="实例化、处理和渲染表单"><a href="#实例化、处理和渲染表单" class="headerlink" title="实例化、处理和渲染表单"></a>实例化、处理和渲染表单</h2><p>  在Django中渲染一个对象的时候：</p><ol><li>在视图中获取它（例如从数据库中取出）</li><li>将它传递给模板上下文</li><li>使用模板变量将它扩展为HTML标记</li></ol><p>  当我们实例化表单时，可以选择让它为空或者对它预先填充：</p><ul><li>模型实例中保存的数据（管理编辑表单的情况下）</li><li>从其他来源中获取的数据</li><li>从前面一个HTML表单提交过来的数据</li></ul><h2 id="构建一张表单"><a href="#构建一张表单" class="headerlink" title="构建一张表单"></a>构建一张表单</h2><p>获取用户的名字：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action&#x3D;&quot;&#x2F;your-name&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;&lt;label for&#x3D;&quot;your_name&quot;&gt;Your name: &lt;&#x2F;label&gt;&lt;input id&#x3D;&quot;your_name&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;your_name&quot; value&#x3D;&quot;&#123;&#123; current_name &#125;&#125;&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;OK&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表单数据返回给URL： /your-name/ ， 使用POST方法。<br>submit中的value可设置按钮的名称。<br>current_name变量，会被填充到your_name字段</p><p>提交表单还需要一个与/your-name/ URL 相对应的视图，该视图将在请求中找到响应的键/值对，然后对其进行处理。</p><h3 id="Django中构建一张表单"><a href="#Django中构建一张表单" class="headerlink" title="Django中构建一张表单"></a>Django中构建一张表单</h3><p><em>Form类</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">class</span> <span class="token class-name">NameForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span>your_name <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">'Your name'</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  定义一个包含一个字段your_name的form类。max_length，在浏览器限制用户输入字符串数量；对传回来的表单，进行长度验证。</p><p>  渲染时，会显示如下：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;label for&#x3D;&quot;your_name&quot;&gt;Your name: &lt;&#x2F;label&gt;&lt;input id&#x3D;&quot;your_name&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;your_name&quot; maxlength&#x3D;&quot;100&quot; required&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  没有包含form标签和提交按钮，需要在模板中提供。</p><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>  发回Django网站的表单数据由视图来处理，一般和发布这个表单用的是同一个视图。<br>  为了处理表单，需要将它实例化到希望发布的URL对应的视图中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponseRedirect<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> NameForm<span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 如果是POST请求，需要处理表单数据</span><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span><span class="token comment"># 创建表单实例，处理请求数据</span>form <span class="token operator">=</span> NameForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token comment"># 验证表单数据</span><span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 处理数据</span><span class="token comment"># ...</span><span class="token comment"># 重定向至新的URL</span><span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span><span class="token string">'/thanks/'</span><span class="token punctuation">)</span><span class="token comment"># 如果是Get或其他请求，创建一个空的表单</span><span class="token keyword">else</span><span class="token punctuation">:</span>form <span class="token operator">=</span> NameForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'name.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  is_valid为False,带着表单返回到模板。HTML表单将用之前提交的数据进行填充，放到可以根据需要进行编辑和修正的位置<br>  is_valid为True，在cleaned_data属性中找到所有通过验证的表单数据。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML"> *name.html*&lt;form action&#x3D;&quot;&#x2F;your-name&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;&#123;&#123; form &#125;&#125;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="详解Django-Form类"><a href="#详解Django-Form类" class="headerlink" title="详解Django Form类"></a>详解Django Form类</h2><p>  实际上，如果表单是要直接用来添加或编辑Django模型，用ModelForm会更方便。因为它会根据Model类构建一张对应字段及其属性的表单。</p><h3 id="绑定与未绑定的表单实例"><a href="#绑定与未绑定的表单实例" class="headerlink" title="绑定与未绑定的表单实例"></a>绑定与未绑定的表单实例</h3><p>  区别：</p><ul><li>未绑定的表单，没有与其关联的数据。渲染后，是空的或包含默认值</li><li>绑定的表单，拥有已提交的数据，可用来判断数据是否合法。<br>is_bound属性将返回是否具有绑定的数据</li></ul><h3 id="字段详解"><a href="#字段详解" class="headerlink" title="字段详解"></a>字段详解</h3><p>  <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/forms/fields/">完整表单字段详解</a></p><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><p>  每个表单字段狗友相对应的控件类，控件类又有对应的HTML表单空间，如：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;inpput type&#x3D;&quot;text&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  默认情况下，CharField有个TextInput空间，会在HTML中生成一个</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;input type&#x3D;&quot;text&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字段数据"><a href="#字段数据" class="headerlink" title="字段数据"></a>字段数据</h3><p>  一旦通过调用is_valid()验证成功，已验证的表单数据将被放到form.cleaned_data字典中。<br>  IntegerField和FloatField的值分别会被转化为python的int和float类型。<br>  使用表单上传文件要以不同的方式处理（可以从request.FILES获取，而不是request.POST中）。</p><h2 id="使用表单模板"><a href="#使用表单模板" class="headerlink" title="使用表单模板"></a>使用表单模板</h2><h3 id="表单渲染选项"><a href="#表单渲染选项" class="headerlink" title="表单渲染选项"></a>表单渲染选项</h3><ul><li> 渲染为table单元，标签为tr</li><li> 标签为p</li><li> 标签为li需要自己提供外层的table或ul元素。</li></ul><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;p&gt;&lt;label for&#x3D;&quot;id_subject&quot;&gt;Subject:&lt;&#x2F;label&gt;&lt;input id&#x3D;&quot;id_subject&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;subject&quot; maxlength&#x3D;&quot;100&quot; required&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;label for&#x3D;&quot;id_message&quot;&gt;Message:&lt;&#x2F;label&gt;&lt;textarea name&#x3D;&quot;message&quot; id&#x3D;&quot;id_message&quot; required&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;label for&#x3D;&quot;id_sender&quot;&gt;Sender:&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;email&quot; name&#x3D;&quot;sender&quot; id&#x3D;&quot;id_sender&quot; required&gt;&lt;&#x2F;p&gt;&lt;p&gt;&lt;label for&#x3D;&quot;id_cc_myself&quot;&gt;Cc myself:&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;cc_myself&quot; id&#x3D;&quot;id_cc_myself&quot;&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历表单字段"><a href="#遍历表单字段" class="headerlink" title="遍历表单字段"></a>遍历表单字段</h3><p>  如果给每个表单字段使用相同的HTML，可以用for依次循环遍历每个字段来减少重复代码：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&#123;% for field in form %&#125;&lt;div class&#x3D;&quot;fieldWrapper&quot;&gt;&#123;&#123; field.errors &#125;&#125;&#123;&#123; field.label_tag &#125;&#125; &#123;&#123; field &#125;&#125;&#123;% if field.help_text %&#125;&lt;p class&#x3D;&quot;help&quot;&gt;&#123;&#123; field.help_text|safe &#125;&#125;&lt;&#x2F;p&gt;&#123;% endif %&#125;&lt;&#x2F;div&gt;&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>field.label_tag</strong></p><p>  该字段的label封装在相应的HTML的label标签中。包含表单的label_suffix。例如，默认的label_suffix是一个冒号：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;label for&#x3D;&quot;id_email&quot;&gt;Email address:&lt;&#x2F;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>field.id_for_label</strong><br>  用于该字段的ID。如果要手动构建label，可能要用此字段来替换label_tag</p><p><strong>field.value</strong><br>  字段的值</p><p><strong>field.html_name</strong><br>  字段名称</p><p><strong>field.help_text</strong><br>  帮助文本</p><p><strong>field.errors</strong><br>  输出一个</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;ul class&#x3D;&quot;errorlist&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  其中包含这个字段的所有验证错误信息。可以用</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&#123;% for error in field.errors %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  循环来自定义错误信息的显示。</p><p><strong>field.is_hidden</strong></p><p>  如果是隐藏字段，属性为True，否则为False.</p><p><strong>field.field</strong></p><p>  看用来访问Field的属性，如</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&#123;&#123; char_field.field.max_length &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="可复用的表单模板"><a href="#可复用的表单模板" class="headerlink" title="可复用的表单模板"></a>可复用的表单模板</h3><p>  如果在多个位置对表单使用相同的渲染逻辑，可以通过将表单的循环保存到独立的模板中，然后在其他模板中使用include标签来减少代码重复。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML"># In your form template:&#123;% include &quot;form_snippet.html&quot; %&#125;# In form_snippet.html:&#123;% for field in form %&#125;&lt;div class&#x3D;&quot;fieldWrapper&quot;&gt;&#123;&#123; field.errors &#125;&#125;&#123;&#123; field.label_tag &#125;&#125; &#123;&#123; field &#125;&#125;&lt;&#x2F;div&gt;&#123;% endfor %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果传递给模板的表单对象在上下文中具有不同的名称，可以使用include标签的with属性来给它取别名。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&#123;% include &quot;form_snippet.html&quot; with form&#x3D;comment_form %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参考</strong><br><a href="https://docs.djangoproject.com/zh-hans/3.2/intro/">Django官方文档</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django自动生成的管理页面</title>
      <link href="/django/manage-site/"/>
      <url>/django/manage-site/</url>
      
        <content type="html"><![CDATA[<h1 id="Django-Web开发"><a href="#Django-Web开发" class="headerlink" title="Django Web开发"></a>Django Web开发</h1><p>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://chynapple.com/django/install-django/">Django-安装及创建项目</a><br>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://chynapple.com/django/first-app/">Django-first app</a></p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p>&nbsp;&nbsp;&nbsp;&nbsp; 通过官方文档中描述，小项目SQLite就够用了。我有很大的理想，但是不得不承认目前确实是个小项目。先用SQLite把整个流程跑通，咱再回来修改为其他数据库吧。<br>&nbsp;&nbsp;&nbsp;&nbsp; <strong>先保证有！再去优化！Let’s Do It！</strong></p><p>现在，打开mysite/settings.py。<br>&nbsp;&nbsp;&nbsp;&nbsp; 由于使用SQLite，<strong>DATABASES</strong>项，我们保持默认就好了。<br>&nbsp;&nbsp;&nbsp;&nbsp; 修改TIME_ZONE为北京时间：Asia/Shanghai<br>&nbsp;&nbsp;&nbsp;&nbsp; INSTALLED_APPS包括以下自带应用</p><ul><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.admin – 管理员站点</li><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.auth – 认证授权系统</li><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.contenttypes – 内容类型框架</li><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.sessions – 会话框架</li><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.messages – 消息框架</li><li>&nbsp;&nbsp;&nbsp;&nbsp; django.contrib.staticfiles – 管理静态文件的框架</li></ul><p>以上应用均被默认启用，方便后续项目使用。如果不想启用直接在INSTALLED_APPS的List中删除就可以了。接下来运行如下代码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/pictures/migrate.png" alt="migrate result"></p><h2 id="创建数据库模型"><a href="#创建数据库模型" class="headerlink" title="创建数据库模型"></a>创建数据库模型</h2><blockquote><p>A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the data you’re storing. Django follows the DRY Principle. The goal is to define your data model in one place and automatically derive things from it.</p></blockquote><p>以官方投票应用为例，投票应用至少要包含问题和选择。所以让我们来创建满足场景的两个模型。<br>编辑polls.models.py</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.db import modelsfrom django.utils import timezoneclass Question(models.Model): #所有模型都要继承django.db.models.Modelquestion_text &#x3D; models.CharField(max_length&#x3D;200)pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)def __str__(self):return self.question_textclass Choice(models.Model):# ForeignKey定义了每个Choice关联到了哪个Question。# Django支持多对一、多对多、一对一question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)choice_text &#x3D; models.CharField(max_length&#x3D;200)votes &#x3D; models.IntegerField(default&#x3D;0)def __str__(self):return self.question_textdef was_published_recently(self):# 判断是否近期发布return self.pub_date &gt;&#x3D; timezone.now() - datetime.timedelta(days&#x3D;1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="激活数据库模型"><a href="#激活数据库模型" class="headerlink" title="激活数据库模型"></a>激活数据库模型</h2><p>为了在工程中包含这个应用，需要在INSTALLED_APPS中添加设置。因为PollsConfig类卸载polls/app.py<br>所以我们在mysite/setting.py中添加路径</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">INSTALLED_APPS &#x3D; [&#39;polls.apps.PollsConfig&#39;, # 添加路径&#39;django.contrib.admin&#39;,&#39;django.contrib.auth&#39;,&#39;django.contrib.contenttypes&#39;,&#39;django.contrib.sessions&#39;,&#39;django.contrib.messages&#39;,&#39;django.contrib.staticfiles&#39;,]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py makemigrations polls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">Migrations for &#39;polls&#39;:polls&#x2F;migrations&#x2F;0001_initial.py- Create model Question- Create model Choice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>makemigrations</strong> ：检测是否有更新，修改部分存储为一次迁移<br><strong>migrate</strong> ：把所有对模型的更改，同步到数据库结构上。</p><p>数据的增删改查，参考<a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/queries/">数据库API</a></p><h2 id="管理页面"><a href="#管理页面" class="headerlink" title="管理页面"></a>管理页面</h2><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>在mysite/settings.py下设置LANGUAGE_CODE为zh-hans。</p><h3 id="创建一个管理员账号"><a href="#创建一个管理员账号" class="headerlink" title="创建一个管理员账号"></a>创建一个管理员账号</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">python manage.py createsuperuserUsername: adminEmail address: 276810962@qq.comPassword: *********Password(again): *********Superuser created successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入 <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a> 来访问管理界面</p><p><img src="/pictures/login.png" alt="登录界面"></p><h3 id="进入管理站点页面"><a href="#进入管理站点页面" class="headerlink" title="进入管理站点页面"></a>进入管理站点页面</h3><p><img src="/pictures/manage.png" alt="管理站点页面"></p><h3 id="向管理页面加入应用"><a href="#向管理页面加入应用" class="headerlink" title="向管理页面加入应用"></a>向管理页面加入应用</h3><p>需要告诉管理，问题Question对象需要一个后台接口。打开polls/admin.py</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom .models import Questionadmin.site.register(Question)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新页面后发现，Questions被显示在页面。</p><p><img src="/pictures/add_app.png" alt="新增Questions"></p><p>有了界面，我们就可以跳过数据库API，直接添加数据了！</p><p><strong>参考</strong><br><a href="https://docs.djangoproject.com/zh-hans/3.2/intro/">Django官方文档</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-first app</title>
      <link href="/django/first-app/"/>
      <url>/django/first-app/</url>
      
        <content type="html"><![CDATA[<p>上一篇<a href="https://chynapple.com/install-django/">《Django-安装及创建项目》</a> 写了如何安装Django以及创建项目。</p><h2 id="创建第一个应用"><a href="#创建第一个应用" class="headerlink" title="创建第一个应用"></a>创建第一个应用</h2><p>这一篇记录一下如何创建项目中的应用。第一个应用当然就是Hello-World了。</p><p>上一篇创建了mysite项目。进入项目后，可以看见manage.py文件。在此执行</p><pre><code>python manage.py startapp polls</code></pre><p>执行成功后，会出现polls文件夹，其目录结构为：</p><pre class="line-numbers language-none"><code class="language-none">polls&#x2F;__init__.pyadmin.pyapp.pymigrations&#x2F;__init__.pymodels.pytests.pyviews.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建第一个视图"><a href="#创建第一个视图" class="headerlink" title="创建第一个视图"></a>创建第一个视图</h2><p>修改polls下的views.py文件，来定义展示什么内容</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.http import HttpResponsedef index(request):return HttpResponse(&quot;Hello World!&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改polls下创建urls.py文件</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.urls import pathfrom . import viewsurlpatterns &#x3D; [ path(&#39;&#39;, views.index, name&#x3D;&#39;index&#39;),] # 网页的二级路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改mysite下的urls.py。 输入网址的时候，<a href="http://www.chynapple.com,会返回主页.想直接跳转到标签页,我们就需要输入www.chynapple.com/tags">www.chynapple.com，会返回主页。想直接跳转到标签页，我们就需要输入www.chynapple.com/tags</a><br>这里/tags就是我们在urlpatterns中设定的path。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from django.contrib import adminfrom django.urls import include, pathurlpatterns &#x3D; [path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),  # 添加polls urlpath(&#39;admin&#x2F;&#39;, admin.site.urls),]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>path()参数：route</strong><br>&nbsp;&nbsp;&nbsp;&nbsp; route是一个匹配URL的准则。当获取一个请求时，route会从urlpatterns的第一项开始，按顺序一次匹配，直到找到匹配项。<br>&nbsp;&nbsp;&nbsp;&nbsp; 函数include()允许引用其他URLconfs。</p><p><strong>path()参数：view</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当找到匹配准则，会调用这个特定的视图函数，传入一个HTTPRequest对象作为第一个参数，被“捕获”的参数以关键字参数的形式传入。（没读懂）</p><p><strong>path()参数：kwargs</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp; 任意关键字参数</p><p><strong>path()参数：name</strong><br>&nbsp;&nbsp;&nbsp;&nbsp; 为URL取名，方便在其他地方应用它。</p><p>让我们通过以下命令验证是否正常工作：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器中访问<a href="http://localhost:8000/polls/">http://localhost:8000/polls/</a></p><p>要注意的是url后面需要加polls。否则可能会返回404页面。<br>如果一切正常，页面中会显示<font color='blue'>Hello World!</font></p><p><strong>参考</strong><br><a href="https://docs.djangoproject.com/zh-hans/3.2/intro/">Django官方文档</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-安装及创建项目</title>
      <link href="/django/install-django/"/>
      <url>/django/install-django/</url>
      
        <content type="html"><![CDATA[<p>  上周研究了如何用Hexo+Github来部署个人网页。看了一下Hexo的官方文档之后，还是无法做进一步的工作。不知道是否可以连接数据库，做动态页面等。<br>  首页的日期也无法动态更改。考虑过后，决定入另外一个坑-Django。毕竟之前用Python也做过一些开发，相对Java的Spring框架上手会容易一些。</p><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>  作为一个Python的Web框架，Django需要Python。由于Python包含SQLite轻量级数据库。暂时就先不安装MySql了。<br>  可以通过<a href="https://www.anaconda.com/products/individual#Downloads">Anaconda</a> 来安装Python。好处是可以创建不同的虚拟环境，来管理不同版本的Python及第三方库等。</p><h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><h3 id="通过pip安装正式发布版本"><a href="#通过pip安装正式发布版本" class="headerlink" title="通过pip安装正式发布版本"></a>通过pip安装正式发布版本</h3><p>anaconda自带pip，无需额外安装。在anaconda环境中，输入以下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ pip install Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>若要验证Django是否能被Python识别，可尝试导入Django：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import djangoprint(django.get_version())3.2.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到此，我们就安装了Django。可以正式使用它来创建自己的网页了！</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先，创建一个目录。打开命令行，cd到该目录，执行如下命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">django-admin startproject mysite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建成功后，会出现mysite目录</p><pre class="line-numbers language-none"><code class="language-none">mysite&#x2F;manage.pymysite&#x2F;__init__.pysettings.pyurls.pyasgi.pywsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>· <strong>manage.py</strong> ：今天刚开始学，感觉很多操作都和这个文件有关。它可以用各种方式管理Django下古墓的命令行工具。<br>· <strong>settings.py</strong> ：Django项目的配置文件<br>· <strong>urls.py</strong> ： URL声明。访问各个页面时配置的URL地址<br>· <strong>asgi.py</strong> ： 运行在ASGI兼容的Web服务器上的入口<br>· <strong>wsgi.py</strong> ： 运行在WSGI兼容的Web服务器上的入口</p><h3 id="创建一个简易web服务器"><a href="#创建一个简易web服务器" class="headerlink" title="创建一个简易web服务器"></a>创建一个简易web服务器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行的输出中会有一些警告信息，时因为没有处理数据库。不过没有关系，没有其他报错信息的话，可以通过<a href="http://127.0.0.1:8000/">http:/127.0.0.1:8000/</a>来访问web了</p><p><img src="/pictures/first_web_page.PNG" alt="first web page"></p><p>这篇整理了如何安装Python、Django以及如何创建一个简易web服务器，并访问。</p><p>后面就开始做页面了，虽然还是从静态页面开始，只要坚持下去，肯定会收获很大的。</p><p><strong>参考</strong><br><a href="https://docs.djangoproject.com/zh-hans/3.2/intro/">Django官方文档</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网站开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web develop </tag>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伤害大脑的9个习惯</title>
      <link href="/life/brain-health/"/>
      <url>/life/brain-health/</url>
      
        <content type="html"><![CDATA[<p>本篇记录至TED心理视频，仅仅是为了提醒自己平时多注意以下几点。<br>如果怀疑自己出现认知能力下降或任何健康情况，还请速速就医。</p><h2 id="第一，在黑暗中待的太久。"><a href="#第一，在黑暗中待的太久。" class="headerlink" title="第一，在黑暗中待的太久。"></a>第一，在黑暗中待的太久。</h2><p>  阳光有助于保持大脑运转良好。没有阳光，大脑就不知道什么时间，如何释放褪黑素。<br>  另外，阳光对视力也有很大的影响。虽然阳光并不是唯一相关因素，但2009年，德国图宾根大学眼科研究机构的几位研究人员，对小鸡做了实验。发现高光照水平，即室外光照强度可以大大减缓小鸡诱发性近视的形成。与哪些出于正常室内光线下的小鸡相比，该过程减缓60%。</p><h2 id="第二，阅览太多负面新闻"><a href="#第二，阅览太多负面新闻" class="headerlink" title="第二，阅览太多负面新闻"></a>第二，阅览太多负面新闻</h2><p> 每天接收的媒体新闻，会影响情绪、思维和行为。据心理治疗师安妮·米勒称，持续接触负面信息会影响大脑，过度接收负面信息会引发应激反应，会对身体、情感和心理健康造成损害。</p><h2 id="第三，耳机声音开太大"><a href="#第三，耳机声音开太大" class="headerlink" title="第三，耳机声音开太大"></a>第三，耳机声音开太大</h2><p> 用耳机听音乐，既方便又放松。长时间对着耳朵大声播放音乐，会对大脑有害无益。吵闹的音乐可能会导致听力损失，导致记忆力减退。</p><h2 id="第四，社交隔离"><a href="#第四，社交隔离" class="headerlink" title="第四，社交隔离"></a>第四，社交隔离</h2><p> 总是回避社交活动或聚会所产生的影响，实际上是相当令人震惊的。除了对心理健康的影响，如：抑郁症。还有对大脑本身的潜在负面影响。根据俄亥俄州立大学2012年的一项研究，长期的社会隔离，会导致大脑的应激反应，使你更容易中风。</p><h2 id="第五，屏幕使用时间过长"><a href="#第五，屏幕使用时间过长" class="headerlink" title="第五，屏幕使用时间过长"></a>第五，屏幕使用时间过长</h2><p> 花很长时间再互联网或社交媒体，不仅会损害心理健康，还会损害大脑中几个关键区域的灰质和白质，比如额叶。这些区域处理的是更高级的思维。在现代社会，不可能脱离互联网或社交媒体。但需要意识到问题，并控制自己，减少在屏幕前所花费的时间。</p><h2 id="第六，吃太多糖"><a href="#第六，吃太多糖" class="headerlink" title="第六，吃太多糖"></a>第六，吃太多糖</h2><p>吃甜食可能是大脑应对压力的方式之一。但摄入过多的糖会导致体内营养大量失衡，可能进一步扩展到大脑中的营养不良。</p><h2 id="第七，不吃早餐"><a href="#第七，不吃早餐" class="headerlink" title="第七，不吃早餐"></a>第七，不吃早餐</h2><p>当睡觉时，身体大约有8个小时没有进食。为了在一天中保持最佳状态，补充所有晚上失去的能量和营养，是至关重要的。</p><h2 id="第八，运动量少"><a href="#第八，运动量少" class="headerlink" title="第八，运动量少"></a>第八，运动量少</h2><p> 运动可以大大提高大脑功能。运动有助于给大脑充氧，促进生长，促进荷尔蒙分泌。因此，运动量少可能会阻碍大脑发育。并随着时间的推移，会对整体健康产生负面影响。</p><h2 id="第九，不良的睡眠习惯"><a href="#第九，不良的睡眠习惯" class="headerlink" title="第九，不良的睡眠习惯"></a>第九，不良的睡眠习惯</h2><p> 睡眠时间和睡眠方式，会对精力、心理健康以及大脑功能和记忆产生影响。缺失足够的睡眠，会对你的长期记忆产生负面影响，导致大脑以不习惯的方式运作。另外，蒙被睡觉也会对大脑有害，因为会破坏大脑和身体之间的氧气流动。</p>]]></content>
      
      
      <categories>
          
          <category> 生活娱乐 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当我们请求网页，计算机都做了什么？</title>
      <link href="/websecurity/web-request/"/>
      <url>/websecurity/web-request/</url>
      
        <content type="html"><![CDATA[<p>        当我们在浏览器中，输入网址<a href="https://chynapple.com/">https://chynapple.com</a>，点击回车就会返回一个完整的页面。我们操作下来非常容易，但计算机都做了哪些工作呢？不懂计算机基础知识的也大概听说过，IP、DNS、路由器、交换机等等，但不知道这些与请求网页的关系到底是怎么样的。出于好奇，在<strong>学堂在线</strong>学习了<strong>网络安全概述</strong>。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>        新连接的笔记本需要通过DHCP来获取IP地址、本地路由器地址、DNS服务器地址</p><p>        1. DHCP查询信息被封装（encapsulated）在UDP（Best effort Delivery）数据段中，之后被封装在IP数据报中，再被封装在802.1 Ethernet数据帧中</p><p>        2. Ethernet数据帧被广播（broadcast）到整个LAN，从而被正在运行DHCP server的网络设备收到</p><p>        3. Ethernet数据帧被解封（demuxed）IP数据报，被解封到UDP网络数据段，被解封到DHCP信息</p><p>        4. 运行DHCP service的Router，就可以看到application信息。（新机器想要获取IP Address）</p><p>        5. Router生成一个DHCP的ACK Message，其中包含用户的IP地址，本地路由器IP地址，DNS服务器的名字和IP地址。</p><p>        6. 在DHCP服务器进行层层封装（encapsulation）后，数据帧通过LAN被推送到用户端此过程中途径的switch对IP地址对应的端口号进行记录，之后数据帧在用户端层层解封</p><p>        7. DHCP用户收到DHCP ACK。获得了IP地址、DNS的名字和地址、以及本地路由器IP地址。</p><p>        8. 通过DNS的域名服务器找到网址的IP address。有本地路由器的地址就可以进行进一步的数据转发        </p><h3 id="ARP（Address-Resolution-Protocol）"><a href="#ARP（Address-Resolution-Protocol）" class="headerlink" title="ARP（Address Resolution Protocol）"></a>ARP（Address Resolution Protocol）</h3><p>        ARP用在DNS和HTTP之前</p><p>        1. 在发出HTTP request之前，需要知道网址的IP地址：DNS</p><p>        2. DNS查询信息被创建、封装到UDP网络断、IP数据报、和Ethernet数据帧。为使数据帧可以被发送到路由器上，需要查出本地路由器MAC地址: ARP</p><p>        3. ARP query在LAN中广播（broadcast），本地路由器收到后回以ARP reply其中包含路由器相应端口的MAC地址。</p><p>        4. 用户端知道了本地路由器的MAC地址，随即向其发出包含DNS query的数据帧。</p><h3 id="DNS的使用"><a href="#DNS的使用" class="headerlink" title="DNS的使用"></a>DNS的使用</h3><p>        1. 含有DNS query的IP数据报被通过LAN Switch从用户端发送到本地路由器</p><p>        2. 此IP数据报从校园网络被发送到本地ISP（comcast）网络上，从而被路由转发（tables created by RIP, OSPF, IS-IS and/or BGP routing protocols）到响应的DNS server</p><p>        3. 在DNS server上被解封</p><p>        4. DNS server返回网址的IP地址</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP（reliable-data-transfer）"><a href="#TCP（reliable-data-transfer）" class="headerlink" title="TCP（reliable data transfer）"></a>TCP（reliable data transfer）</h3><p>        HTTP必须要用TCP。因为不希望download的主页，有任何形式的错误发生。</p><p>        1. 为发送HTTP request，用户端首先创建一个跟web server之间的TCP socket</p><p>        2. TCP SYN segment（三步握手信息中的第一条信息）通过inter-domain routing被传送到web server上。记录创建状态西信息。</p><p>        3. web server返回一个TCP SYNACK信息（三步握手中的第二步）</p><p>        4. TCP连接创建成功</p><h3 id="HTTP-request-reply"><a href="#HTTP-request-reply" class="headerlink" title="HTTP request/reply"></a>HTTP request/reply</h3><p>        1. HTTP request被推入TCP socket中</p><p>        2. 包含HTTP request的IP数据报被传送（routed）到网址的web server</p><p>        3. web server返回HTTP reply（包含所需主页内容）</p><p>        4. 含有HTTP reply的IP数据报被转发回用户端</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活记录的开始</title>
      <link href="/life/first-page/"/>
      <url>/life/first-page/</url>
      
        <content type="html"><![CDATA[<p>最近发现记忆力越来越差，看过的电影，忘了剧情；学过的知识，记得部分；认识的朋友，叫不上名；美好的瞬间，忘记细节。</p><p>因此，想要通过博客来记录生活。</p><p>记录会分为两大类</p><h2 id="技术分享"><a href="#技术分享" class="headerlink" title="技术分享"></a>技术分享</h2><h3 id="计算机基础、人工智能、摄影"><a href="#计算机基础、人工智能、摄影" class="headerlink" title="计算机基础、人工智能、摄影"></a>计算机基础、人工智能、摄影</h3><p>最近学习的内容分为以上三类，会不定期更新，所学的内容</p><h2 id="生活娱乐"><a href="#生活娱乐" class="headerlink" title="生活娱乐"></a>生活娱乐</h2><h3 id="影视剧-演出、旅游、美食"><a href="#影视剧-演出、旅游、美食" class="headerlink" title="影视剧/演出、旅游、美食"></a>影视剧/演出、旅游、美食</h3><p>近期看的比较好的影视剧/演出，游记，以及吃过的比较好吃的美食</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
